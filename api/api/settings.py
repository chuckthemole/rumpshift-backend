"""
Django settings for api project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from shared.utils.parsing import parse_env_list
from pathlib import Path
from dotenv import load_dotenv
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

load_dotenv(BASE_DIR / ".env")
ENV = os.getenv("DEVELOPMENT_ENV", "dev")
SECRET_KEY = os.getenv("DJANGO_SECRET_KEY")
DEBUG = os.getenv("DEBUG")
ALLOWED_HOSTS = os.getenv("ALLOWED_HOSTS").split(",")

# ==============================================
# SERVICE URLS (Internal Communication)
# ==============================================
if ENV == "prod" or ENV == "production":
    SPRINGBOOT_URL = os.getenv("LIVE_SPRINGBOOT_URL")
if ENV == "development" or ENV == "dev":
    SPRINGBOOT_URL = os.getenv("DEV_SPRINGBOOT_URL")

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'apps.notion_api',
    'apps.arduino_consumer_api',
    'apps.rumpshift_analytics_api',
    'storages'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# ----------------------------
# STATIC configuration
# ----------------------------
# Grab environment
# ENV = os.getenv("DEVELOPMENT_ENV", "dev")  # default to dev if not set

# Common settings
# MEDIA_URL = "/media/"
# MEDIA_ROOT = BASE_DIR / "media"

# ----------------------------
# STATIC / MEDIA configuration
# ----------------------------
if ENV == "prod":
    # S3 bucket settings
    AWS_STORAGE_BUCKET_NAME = os.getenv("AWS_STORAGE_BUCKET_NAME")
    AWS_S3_REGION_NAME = os.getenv("AWS_S3_REGION_NAME")
    AWS_ACCESS_KEY_ID = os.getenv("AWS_ACCESS_KEY_ID")
    AWS_SECRET_ACCESS_KEY = os.getenv("AWS_SECRET_ACCESS_KEY")

    # Folder prefix inside bucket
    BUCKET_PREFIX = os.getenv("AWS_BUCKET_PREFIX")

    STORAGES = {
        "staticfiles": {
            "BACKEND": "storages.backends.s3boto3.S3Boto3Storage",
            "OPTIONS": {
                "access_key": AWS_ACCESS_KEY_ID,
                "secret_key": AWS_SECRET_ACCESS_KEY,
                "bucket_name": AWS_STORAGE_BUCKET_NAME,
                "region_name": AWS_S3_REGION_NAME,
                "custom_domain": f"{AWS_STORAGE_BUCKET_NAME}.s3.{AWS_S3_REGION_NAME}.amazonaws.com",
                "location": f"{BUCKET_PREFIX}/static",
            },
        },
        "media": {
            "BACKEND": "storages.backends.s3boto3.S3Boto3Storage",
            "OPTIONS": {
                "access_key": AWS_ACCESS_KEY_ID,
                "secret_key": AWS_SECRET_ACCESS_KEY,
                "bucket_name": AWS_STORAGE_BUCKET_NAME,
                "region_name": AWS_S3_REGION_NAME,
                "custom_domain": f"{AWS_STORAGE_BUCKET_NAME}.s3.{AWS_S3_REGION_NAME}.amazonaws.com",
                "location": f"{BUCKET_PREFIX}/media",
            },
        },
    }

    STATICFILES_STORAGE = "staticfiles"
    DEFAULT_FILE_STORAGE = "media"

    STATIC_URL = f"https://{AWS_STORAGE_BUCKET_NAME}.s3.{AWS_S3_REGION_NAME}.amazonaws.com/{BUCKET_PREFIX}/static/"
    MEDIA_URL = f"https://{AWS_STORAGE_BUCKET_NAME}.s3.{AWS_S3_REGION_NAME}.amazonaws.com/{BUCKET_PREFIX}/media/"

else:
    # Local filesystem for development
    STATIC_URL = "/static/"
    STATIC_ROOT = BASE_DIR / "static"
    STATICFILES_DIRS = [BASE_DIR / "staticfiles"]

    MEDIA_URL = "/media/"
    MEDIA_ROOT = BASE_DIR / "media"

# ----------------------------
# CORS configuration
# ----------------------------
# Allow CORS for your React dev server (localhost:3000)
# install django-cors-headers first: pip install django-cors-headers
INSTALLED_APPS += ['corsheaders']
MIDDLEWARE = ['corsheaders.middleware.CorsMiddleware'] + MIDDLEWARE
# CORS_ALLOW_ALL_ORIGINS = os.getenv(
#     "CORS_ALLOW_ALL_ORIGINS", 'False').lower() in ('true', '1', 'yes', 'on')

# Allow credentials for Axios with withCredentials
CORS_ALLOW_CREDENTIALS = True

# Parse comma-separated allowed origins from env
CORS_ALLOWED_ORIGINS = parse_env_list(os.getenv("CORS_ALLOWED_ORIGINS", ""))

# Parse comma-separated regex patterns from env
CORS_ALLOWED_ORIGIN_REGEXES = parse_env_list(
    os.getenv("CORS_ALLOWED_ORIGIN_REGEXES", ""))

# ----------------------------
# DEBUG
# ----------------------------
# Optional: log to verify during startup
print("CORS_ALLOWED_ORIGINS:", CORS_ALLOWED_ORIGINS)
print("CORS_ALLOWED_ORIGIN_REGEXES:", CORS_ALLOWED_ORIGIN_REGEXES)
print("DEVELOPMENT_ENV:", ENV)

ROOT_URLCONF = 'api.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'api.wsgi.application'

# ----------------------------
# Database configuration
# ----------------------------
if ENV == "prod":
    # production database
    DATABASES = {
        "default": {
            # e.g., 'django.db.backends.postgresql' or 'django.db.backends.mysql'
            "ENGINE": os.getenv("DB_ENGINE"),
            "NAME": os.getenv("DB_NAME"),
            "USER": os.getenv("DB_USER"),
            "PASSWORD": os.getenv("DB_PASSWORD"),
            "HOST": os.getenv("DB_HOST"),
            "PORT": os.getenv("DB_PORT"),  # PostgreSQL: 5432, MySQL: 3306
        }
    }
else:
    # Local dev database
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",  # force SQLite
            "NAME": str(BASE_DIR / "db.sqlite3"),    # simple path
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "[{levelname}] {asctime} {name}: {message}",
            "style": "{",
        },
        "simple": {
            "format": "[{levelname}] {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
    },
    "loggers": {
        # Your module
        "": {  # root logger
            "handlers": ["console"],
            "level": "INFO",  # show INFO+ messages
        },
        "django": {  # Django internal logging
            "handlers": ["console"],
            "level": "INFO",
            "propagate": False,
        },
    },
}
